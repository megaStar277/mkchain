#!/usr/bin/env bash

# shellcheck shell=bash

# ``````````````````````````````````````````````````````````````````````````````
# Function name: sslChainGenerate()
#
# Description:
#   It generate a proper chain of delivered certificates.
#
# Usage:
#   sslChainGenerate
#
# Examples:
#   sslChainGenerate
#

function sslChainGenerate() {

  local _FUNCTION_ID="sslChainGenerate"
  local _STATE=0

  local _key_chain_state="1"

  # The mechanism involved in the location of sorted items.
  # shellcheck disable=SC2154
  for i in "${ssl_attr_sorted[@]}" ; do

    _absolute_path=$(echo "$i" | awk -v FS="(:|:)" '{print $1}')
    _root_issuer=$(echo "$i" | awk -v FS="(:|:)" '{print $2}')
    _root_subject=$(echo "$i" | awk -v FS="(:|:)" '{print $3}')

    if [[ "$_root_issuer" == "$_root_subject" ]] ; then

      if [[ "$_with_root" -eq 1 ]] ; then

        _path="$(basename "$_absolute_path")"

        _logger "info" \
          "$_FUNCTION_ID()" \
          "add $_path"

        # alternative: (cat "$_absolute_path" ; echo) >> "$_output_fd"
        # shellcheck disable=SC2154
        cat "$_absolute_path" >> "$_output_fd"

      fi

    else

      _path="$(basename "$_absolute_path")"

      _logger "info" \
        "$_FUNCTION_ID()" \
        "add $_path"

      # alternative: (cat "$_absolute_path" ; echo) >> "$_output_fd"
      # shellcheck disable=SC2154
      cat "$_absolute_path" >> "$_output_fd"

    fi

  done

  printf "  \\e[1;34m%s\\e[m:\\n\\n" "Comments"

  # shellcheck disable=SC2154
  if [[ "$_key_type_ident" == "true" ]] ; then

    printf "    \\e[0;32m*\\e[m %s\\n" "found correct identity (end-user, server) certificate"

    _logger "warn" \
      "$_FUNCTION_ID()" \
      "found correct identity (end-user, server) certificate"

  else

    _key_chain_state=0

    printf "    \\e[0;31m*\\e[m %s\\n" "not found correct identity (end-user, server) certificate"

    _logger "warn" \
      "$_FUNCTION_ID()" \
      "not found correct identity (end-user, server) certificate"

  fi

  # shellcheck disable=SC2154
  if [[ "$_key_type_inter" == "true" ]] ; then

    printf "    \\e[0;32m*\\e[m %s %d %s\\n" "found" "$_key_type_inter_count" "correct intermediate certificate(s)"

    _logger "warn" \
      "$_FUNCTION_ID()" \
      "found $_key_type_inter_count correct intermediate certificate"

  elif [[ "$_key_type_root_inter" == "false" ]] && \
       [[ "$_key_type_inter_count" -eq 0 ]] ; then

    _key_chain_state=0
    _key_inter_state=1

    printf "    \\e[0;31m*\\e[m %s\\n" "one or more intermediate certificate not found"

    _logger "warn" \
     "$_FUNCTION_ID()" \
     "one or more intermediate certificate not found"

  else

    printf "    \\e[0;31m*\\e[m %s\\n" "not found first intermediate certificate"

    _logger "warn" \
      "$_FUNCTION_ID()" \
      "not found first intermediate certificate"

    _key_chain_state=0
    _key_type_inter_count=0

  fi

  # shellcheck disable=SC2154
  if [[ "$_key_type_root" == "true" ]] ; then

    if [[ "$_key_type_inter" == "true" ]] ; then

      if [[ "$_key_type_root_inter" == "true" ]] && \
         [[ "$_key_type_inter_count" -gt 1 ]] ; then

        _key_chain_state=1
        _key_inter_state=1

      elif [[ "$_key_type_root_inter_visible" == "true" ]] ; then

        if [[ "$_key_type_inter_count" -eq 1 ]] && [[ "$_key_type_root_inter" == "true" ]] ; then

          _key_chain_state=0
          _key_inter_state=1

          printf "    \\e[0;31m*\\e[m %s\\n" "not found second intermediate certificate"

          _logger "warn" \
            "$_FUNCTION_ID()" \
            "not found second intermediate certificate"

        else

          _key_chain_state=1
          _key_inter_state=1

        fi

      fi

    elif [[ "$_key_type_root_inter" == "false" ]] ; then

      _key_chain_state=1
      _key_inter_state=1

    elif [[ "$_key_type_inter_count" -lt 1 ]] ; then

      _key_chain_state=0
      _key_inter_state=0

    else

      _key_chain_state=1
      _key_inter_state=1

    fi

  elif [[ "$_key_type_root_inter" == "false" ]] ; then

    if [[ "$_key_type_inter_count" -eq 0 ]] ; then

      _key_chain_state=1
      _key_inter_state=1

    elif [[ "$_key_type_inter_count" -le 1 ]] ; then

      _key_chain_state=0
      _key_inter_state=1

      printf "    \\e[0;31m*\\e[m %s\\n" "not found second intermediate certificate"

      _logger "warn" \
        "$_FUNCTION_ID()" \
        "not found second intermediate certificate"

    fi

  else

    _key_chain_state=1
    _key_inter_state=1

  fi

  # shellcheck disable=SC2154
  if [[ "$_key_type_root" == "true" ]] ; then

    #shellcheck disable=SC2034
    _key_root_state=1

    printf "    \\e[0;32m*\\e[m %s\\n" "found correct root certificate"

    _logger "warn" \
      "$_FUNCTION_ID()" \
      "found correct root certificate"

  else

    if [[ "$_key_inter_state" -eq 0 ]] || \
       [[ "$_key_type_inter_count" -eq 0 ]] ; then

      _key_chain_state=0

    else

      _key_chain_state=0

    fi

    printf "    \\e[0;34m*\\e[m %s\\n" "not found correct root certificate"

    _logger "warn" \
      "$_FUNCTION_ID()" \
      "not found correct root certificate"

  fi

  # shellcheck disable=SC2154
  if [[ "$_key_empty_value" == "true" ]] ; then

    printf "    \\e[0;34m*\\e[m %s\\n" "an empty CN field was found in one of the certificates"

    _logger "warn" \
      "$_FUNCTION_ID()" \
      "an empty CN field was found in one of the certificates"

  fi

  printf "\\n  \\e[1;34m%s\\e[m: " "Result"

  # shellcheck disable=SC2154
  if [[ "$_key_chain_state" -eq "0" ]] ; then

    printf "\\e[1;31m%s\\e[m\\n\\n" "chain not generated correctly"

    _logger "warn" \
      "$_FUNCTION_ID()" \
      "chain not generated correctly"

  else

    printf "\\e[1;32m%s\\e[m\\n\\n" "chain generated correctly"

    _logger "warn" \
      "$_FUNCTION_ID()" \
      "chain generated correctly"

  fi

  return $_STATE

}
