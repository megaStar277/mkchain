# shellcheck shell=bash

# ``````````````````````````````````````````````````````````````````````````````
# Function name: sslChainGenerate()
#
# Description:
#   It generate a proper chain of delivered certificates.
#
# Usage:
#   sslChainGenerate
#
# Examples:
#   sslChainGenerate
#

function sslChainGenerate() {

  local _FUNCTION_ID="sslChainGenerate"
  local _STATE=0

  # The mechanism involved in the location of sorted items.
  # shellcheck disable=SC2154
  for i in "${ssl_attr_sorted[@]}" ; do

    _absolute_path="${i%%:*}"
    _path="$(basename "$_absolute_path")"

    _logger "info" \
      "$_FUNCTION_ID()" \
      "add $_path"

    # alternative: (cat "$_absolute_path" ; echo) >> "$_fd"
    # shellcheck disable=SC2154
    cat "$_absolute_path" >> "$_fd"

  done

  printf "  %s: " "Result"

  # shellcheck disable=SC2154
  if [[ "$_key_type_inter" == "false" ]] || [[ "$_key_type_ident" == "false" ]] ; then

    printf "\e[1;31m%s\e[m\n\n" "chain not generated correctly"

    _logger "warn" \
      "$_FUNCTION_ID()" \
      "chain not generated correctly"

  else

    printf "\e[1;32m%s\e[m\n\n" "chain generated correctly"

    _logger "warn" \
      "$_FUNCTION_ID()" \
      "chain generated correctly"

  fi



  # shellcheck disable=SC2154
  if [[ "$_key_empty_value" == "true" ]] ; then

    printf "  * %s\n" "an empty CN field was found in one of the certificates"

    _logger "warn" \
      "$_FUNCTION_ID()" \
      "an empty CN field was found in one of the certificates"

  fi

  # shellcheck disable=SC2154
  if [[ "$_key_type_ident" == "true" ]] ; then

    printf "    * %s\n" "found identity (end-user, server) certificate"

    _logger "warn" \
      "$_FUNCTION_ID()" \
      "found identity (end-user, server) certificate"

  else

    printf "    * \e[1;31m%s\e[m\n" "not found identity (end-user, server) certificate"

    _logger "crit" \
      "$_FUNCTION_ID()" \
      "not found identity (end-user, server) certificate"

  fi

  # shellcheck disable=SC2154
  if [[ "$_key_type_inter" == "true" ]] ; then

    printf "    * %s %d %s\n" "found" "$_key_type_inter_count" "intermediate certificate(s)"

    _logger "warn" \
      "$_FUNCTION_ID()" \
      "found intermediate certificate"

  fi

  # shellcheck disable=SC2154
  if [[ "$_key_type_root" == "true" ]] && [[ "$_key_type_inter_count" -eq 1 ]] ; then

    printf "    * \e[1;31m%s\e[m\n" "one intermediate certificate is missing"

    _logger "warn" \
      "$_FUNCTION_ID()" \
      "one intermediate certificate is missing"

  elif [[ "$_key_type_root" == "true" ]] && [[ "$_key_type_inter_count" -lt 1 ]] ; then

    printf "    * \e[1;31m%s\e[m\n" "second intermediate certificate is missing"

    _logger "warn" \
      "$_FUNCTION_ID()" \
      "second intermediate certificate is missing"

  fi

  # shellcheck disable=SC2154
  if [[ "$_key_type_root" == "true" ]] ; then

    printf "    * %s\n" "found root certificate"

    _logger "warn" \
      "$_FUNCTION_ID()" \
      "found root certificate"

  else

    printf "    * \e[1;33m%s\e[m\n" "not found root certificate"

    _logger "warn" \
      "$_FUNCTION_ID()" \
      "not found root certificate"

  fi

  echo

  return $_STATE

}
